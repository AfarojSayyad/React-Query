{"ast":null,"code":"var _jsxFileName = \"/home/sagar/Internship_Work/Afroj React Query/React-Query/src/components/InfiniteQueries.page.js\",\n    _s = $RefreshSig$();\n\nimport { Fragment } from 'react';\nimport { useInfiniteQuery } from 'react-query';\nimport axios from 'axios';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\n\nconst fetchColors = _ref => {\n  let {\n    pageParam = 1\n  } = _ref;\n  return axios.get(`http://localhost:3000/colors?_limit=2&_page=${pageParam}`);\n};\n\nexport const InfiniteQueriesPage = () => {\n  _s();\n\n  const {\n    isLoading,\n    isError,\n    error,\n    data,\n    fetchNextPage,\n    hasNextPage,\n    isFetching,\n    isFetchingNextPage\n  } = useInfiniteQuery(['colors'], fetchColors, {\n    //c:getNextPageParam: this is inbuilt function which recieves 2 parameters\n    // c: we don't need lastPage so we have added _ (underscore) nfront of it\n    //c: page here refers to an array of API responses where each response corresponds to fetching 2 colors at a time\n    getNextPageParam: (_lastPage, pages) => {\n      if (pages.length < 4) {\n        return pages.length + 1;\n      } else {\n        return undefined;\n      }\n    }\n  });\n\n  if (isLoading) {\n    return /*#__PURE__*/_jsxDEV(\"h2\", {\n      children: \"Loading...\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 33,\n      columnNumber: 12\n    }, this);\n  }\n\n  if (isError) {\n    return /*#__PURE__*/_jsxDEV(\"h2\", {\n      children: error.message\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 37,\n      columnNumber: 12\n    }, this);\n  }\n\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      children: data === null || data === void 0 ? void 0 : data.pages.map((group, i) => {\n        return /*#__PURE__*/_jsxDEV(Fragment, {\n          children: group.data.map(color => /*#__PURE__*/_jsxDEV(\"h2\", {\n            children: [color.id, \" \", color.label]\n          }, color.id, true, {\n            fileName: _jsxFileName,\n            lineNumber: 47,\n            columnNumber: 17\n          }, this))\n        }, i, false, {\n          fileName: _jsxFileName,\n          lineNumber: 45,\n          columnNumber: 13\n        }, this);\n      })\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 42,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      children: /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: () => fetchNextPage(),\n        disabled: !hasNextPage,\n        children: \"Load more\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 56,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 55,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      children: isFetching && !isFetchingNextPage ? 'Fetching...' : null\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 60,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true);\n};\n\n_s(InfiniteQueriesPage, \"czo8oSP9FmhrhSht1niujb4dRIc=\", false, function () {\n  return [useInfiniteQuery];\n});\n\n_c = InfiniteQueriesPage;\n\nvar _c;\n\n$RefreshReg$(_c, \"InfiniteQueriesPage\");","map":{"version":3,"names":["Fragment","useInfiniteQuery","axios","fetchColors","pageParam","get","InfiniteQueriesPage","isLoading","isError","error","data","fetchNextPage","hasNextPage","isFetching","isFetchingNextPage","getNextPageParam","_lastPage","pages","length","undefined","message","map","group","i","color","id","label"],"sources":["/home/sagar/Internship_Work/Afroj React Query/React-Query/src/components/InfiniteQueries.page.js"],"sourcesContent":["import { Fragment } from 'react'\nimport { useInfiniteQuery } from 'react-query'\nimport axios from 'axios'\n\nconst fetchColors = ({ pageParam = 1 }) => {\n  return axios.get(`http://localhost:3000/colors?_limit=2&_page=${pageParam}`)\n}\n\nexport const InfiniteQueriesPage = () => {\n  const {\n    isLoading,\n    isError,\n    error,\n    data,\n    fetchNextPage,\n    hasNextPage,\n    isFetching,\n    isFetchingNextPage\n  } = useInfiniteQuery(['colors'], fetchColors, {\n     //c:getNextPageParam: this is inbuilt function which recieves 2 parameters\n    // c: we don't need lastPage so we have added _ (underscore) nfront of it\n    //c: page here refers to an array of API responses where each response corresponds to fetching 2 colors at a time\n    getNextPageParam: (_lastPage, pages) => {\n      if (pages.length < 4) {\n        return pages.length + 1\n      } else {\n        return undefined\n      }\n    }\n  })\n\n  if (isLoading) {\n    return <h2>Loading...</h2>\n  }\n\n  if (isError) {\n    return <h2>{error.message}</h2>\n  }\n\n  return (\n    <>\n      <div>\n        {data?.pages.map((group, i) => {\n          return (\n            <Fragment key={i}>\n              {group.data.map(color => (\n                <h2 key={color.id}>\n                  {color.id} {color.label}\n                </h2>\n              ))}\n            </Fragment>\n          )\n        })}\n      </div>\n      <div>\n        <button onClick={() => fetchNextPage()} disabled={!hasNextPage}>\n          Load more\n        </button>\n      </div>\n      <div>{isFetching && !isFetchingNextPage ? 'Fetching...' : null}</div>\n    </>\n  )\n}\n\n"],"mappings":";;;AAAA,SAASA,QAAT,QAAyB,OAAzB;AACA,SAASC,gBAAT,QAAiC,aAAjC;AACA,OAAOC,KAAP,MAAkB,OAAlB;;;;AAEA,MAAMC,WAAW,GAAG,QAAuB;EAAA,IAAtB;IAAEC,SAAS,GAAG;EAAd,CAAsB;EACzC,OAAOF,KAAK,CAACG,GAAN,CAAW,+CAA8CD,SAAU,EAAnE,CAAP;AACD,CAFD;;AAIA,OAAO,MAAME,mBAAmB,GAAG,MAAM;EAAA;;EACvC,MAAM;IACJC,SADI;IAEJC,OAFI;IAGJC,KAHI;IAIJC,IAJI;IAKJC,aALI;IAMJC,WANI;IAOJC,UAPI;IAQJC;EARI,IASFb,gBAAgB,CAAC,CAAC,QAAD,CAAD,EAAaE,WAAb,EAA0B;IAC3C;IACD;IACA;IACAY,gBAAgB,EAAE,CAACC,SAAD,EAAYC,KAAZ,KAAsB;MACtC,IAAIA,KAAK,CAACC,MAAN,GAAe,CAAnB,EAAsB;QACpB,OAAOD,KAAK,CAACC,MAAN,GAAe,CAAtB;MACD,CAFD,MAEO;QACL,OAAOC,SAAP;MACD;IACF;EAV2C,CAA1B,CATpB;;EAsBA,IAAIZ,SAAJ,EAAe;IACb,oBAAO;MAAA;IAAA;MAAA;MAAA;MAAA;IAAA,QAAP;EACD;;EAED,IAAIC,OAAJ,EAAa;IACX,oBAAO;MAAA,UAAKC,KAAK,CAACW;IAAX;MAAA;MAAA;MAAA;IAAA,QAAP;EACD;;EAED,oBACE;IAAA,wBACE;MAAA,UACGV,IADH,aACGA,IADH,uBACGA,IAAI,CAAEO,KAAN,CAAYI,GAAZ,CAAgB,CAACC,KAAD,EAAQC,CAAR,KAAc;QAC7B,oBACE,QAAC,QAAD;UAAA,UACGD,KAAK,CAACZ,IAAN,CAAWW,GAAX,CAAeG,KAAK,iBACnB;YAAA,WACGA,KAAK,CAACC,EADT,OACcD,KAAK,CAACE,KADpB;UAAA,GAASF,KAAK,CAACC,EAAf;YAAA;YAAA;YAAA;UAAA,QADD;QADH,GAAeF,CAAf;UAAA;UAAA;UAAA;QAAA,QADF;MASD,CAVA;IADH;MAAA;MAAA;MAAA;IAAA,QADF,eAcE;MAAA,uBACE;QAAQ,OAAO,EAAE,MAAMZ,aAAa,EAApC;QAAwC,QAAQ,EAAE,CAACC,WAAnD;QAAA;MAAA;QAAA;QAAA;QAAA;MAAA;IADF;MAAA;MAAA;MAAA;IAAA,QAdF,eAmBE;MAAA,UAAMC,UAAU,IAAI,CAACC,kBAAf,GAAoC,aAApC,GAAoD;IAA1D;MAAA;MAAA;MAAA;IAAA,QAnBF;EAAA,gBADF;AAuBD,CAtDM;;GAAMR,mB;UAUPL,gB;;;KAVOK,mB"},"metadata":{},"sourceType":"module"}