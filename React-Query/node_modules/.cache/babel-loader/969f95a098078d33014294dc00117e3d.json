{"ast":null,"code":"var _s = $RefreshSig$(),\n    _s2 = $RefreshSig$();\n\nimport { useQuery, useMutation } from \"react-query\";\nimport axios from \"axios\";\n\nconst fetchSuperHeroes = () => {\n  return axios.get('http://localhost:3000/superheroes');\n}; //c:Mutations code for adding new info of new hero\n// c: below function is going to acept the hero detail which we are going to pass in from our component\n\n\nconst addSuperHero = hero => {\n  return axios.post('http://localhost:3000/superheroes', hero);\n};\n\nexport const useSuperHeroesData = (onSuccess, onError) => {\n  _s();\n\n  return useQuery('seper-heroes', fetchSuperHeroes, {\n    // cacheTime: 5000, //c:default cache time is of 5 mins but you can set your own cache time is here\n    //staleTime:30000 //c: default staleTime is 0 seconds.used to reduce network requests if we don't have frequently updating data\n    //refetchOnMount: true //c: dafault value is true.the query will refetch onMount if the data is stale/ in other words data is fetchedevery time when the component mounts\n    //refetchOnMount: false //c: In this case the data will not fetched onMount.\n    //refetchOnMount:'always'\n    //refetchOnWindowFocus:true//c:It will update the data automatically when the window is focused.\n    //refetchOnWindowFocus:false\n    //refetchOnWindowFocus:'always'\n    //refetchInterval: 2000, //c: it will fetch the data for every 2 seconds\n    //refetchIntervalInBackground : true, //c:It will fetch the data even when screen is not on focus. \n    //enabled: false //c:It won't show any data\n    //key      //value\n    onSuccess: onSuccess,\n    onError: onError //enabled:false,\n    //c: data here refers to the superHeroNames array\n    // select:(data) => {\n    //     const superHeroNames = data.data.map(hero => hero.name)\n    //     // const superHeroNames = data.data.map(hero => hero.alterEgo)\n    //     return superHeroNames //c:It will change the destructured data to an array of superHeroNames\n    // }\n\n  });\n}; //Mutatons code for adding new info of new hero\n\n_s(useSuperHeroesData, \"4ZpngI1uv+Uo3WQHEZmTQ5FNM+k=\", false, function () {\n  return [useQuery];\n});\n\nexport const useAddSuperHeroData = () => {\n  _s2();\n\n  return useMutation(addSuperHero);\n};\n\n_s2(useAddSuperHeroData, \"wwwtpB20p0aLiHIvSy5P98MwIUg=\", false, function () {\n  return [useMutation];\n});","map":{"version":3,"names":["useQuery","useMutation","axios","fetchSuperHeroes","get","addSuperHero","hero","post","useSuperHeroesData","onSuccess","onError","useAddSuperHeroData"],"sources":["/home/sagar/Internship_Work/Afroj React Query/React-Query/src/components/hooks/useSuperHeroesData.js"],"sourcesContent":["import { useQuery, useMutation } from \"react-query\";\nimport axios from \"axios\";\n\nconst fetchSuperHeroes = () => {\n    return axios.get('http://localhost:3000/superheroes')\n}\n//c:Mutations code for adding new info of new hero\n// c: below function is going to acept the hero detail which we are going to pass in from our component\nconst addSuperHero=(hero)=>{\n    return axios.post('http://localhost:3000/superheroes',hero)\n\n}\nexport const useSuperHeroesData = (onSuccess, onError) => {\n    return useQuery('seper-heroes', fetchSuperHeroes, \n            {\n                // cacheTime: 5000, //c:default cache time is of 5 mins but you can set your own cache time is here\n                //staleTime:30000 //c: default staleTime is 0 seconds.used to reduce network requests if we don't have frequently updating data\n                //refetchOnMount: true //c: dafault value is true.the query will refetch onMount if the data is stale/ in other words data is fetchedevery time when the component mounts\n                //refetchOnMount: false //c: In this case the data will not fetched onMount.\n                //refetchOnMount:'always'\n                //refetchOnWindowFocus:true//c:It will update the data automatically when the window is focused.\n                //refetchOnWindowFocus:false\n                //refetchOnWindowFocus:'always'\n                //refetchInterval: 2000, //c: it will fetch the data for every 2 seconds\n                //refetchIntervalInBackground : true, //c:It will fetch the data even when screen is not on focus. \n                //enabled: false //c:It won't show any data\n                //key      //value\n                onSuccess: onSuccess,\n                onError:onError,\n                //enabled:false,\n                //c: data here refers to the superHeroNames array\n                // select:(data) => {\n                //     const superHeroNames = data.data.map(hero => hero.name)\n                //     // const superHeroNames = data.data.map(hero => hero.alterEgo)\n                //     return superHeroNames //c:It will change the destructured data to an array of superHeroNames\n                // }\n\n\n            }\n    )\n\n}\n//Mutatons code for adding new info of new hero\nexport const useAddSuperHeroData=()=>{\n    return useMutation(addSuperHero)\n}"],"mappings":";;;AAAA,SAASA,QAAT,EAAmBC,WAAnB,QAAsC,aAAtC;AACA,OAAOC,KAAP,MAAkB,OAAlB;;AAEA,MAAMC,gBAAgB,GAAG,MAAM;EAC3B,OAAOD,KAAK,CAACE,GAAN,CAAU,mCAAV,CAAP;AACH,CAFD,C,CAGA;AACA;;;AACA,MAAMC,YAAY,GAAEC,IAAD,IAAQ;EACvB,OAAOJ,KAAK,CAACK,IAAN,CAAW,mCAAX,EAA+CD,IAA/C,CAAP;AAEH,CAHD;;AAIA,OAAO,MAAME,kBAAkB,GAAG,CAACC,SAAD,EAAYC,OAAZ,KAAwB;EAAA;;EACtD,OAAOV,QAAQ,CAAC,cAAD,EAAiBG,gBAAjB,EACP;IACI;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACAM,SAAS,EAAEA,SAbf;IAcIC,OAAO,EAACA,OAdZ,CAeI;IACA;IACA;IACA;IACA;IACA;IACA;;EArBJ,CADO,CAAf;AA4BH,CA7BM,C,CA8BP;;GA9BaF,kB;UACFR,Q;;;AA8BX,OAAO,MAAMW,mBAAmB,GAAC,MAAI;EAAA;;EACjC,OAAOV,WAAW,CAACI,YAAD,CAAlB;AACH,CAFM;;IAAMM,mB;UACFV,W"},"metadata":{},"sourceType":"module"}